using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;

namespace BepInPreloader
{
    public class Loader
    {
        private static InitVfsDelegate init_vfs;

        [DllImport("user32.dll", CharSet = CharSet.Unicode)]
        public static extern int MessageBox(IntPtr hWnd, string text, string caption, uint type);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
        public static extern IntPtr LoadLibrary(string lpFileName);

        [DllImport("kernel32.dll")]
        public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

        public static void Main(string[] args)
        {
            string gamePath = Path.GetDirectoryName(args[0]);

            // Inject the current folder to the search path to make LoadLibrary worrk
            string coreDir = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            Environment.SetEnvironmentVariable("PATH", $"{coreDir};{Environment.GetEnvironmentVariable("PATH")}");

            // Search for the needed method manually
            // Tried using an extern signature, but that failed (probably because of the search path thing)
            IntPtr lib = LoadLibrary("VirtualFS.dll");
            IntPtr ivfs = GetProcAddress(lib, "init_vfs");
            init_vfs = (InitVfsDelegate) Marshal.GetDelegateForFunctionPointer(ivfs, typeof(InitVfsDelegate));

            //TODO: We can generate VFS tree on the fly and pass it as a string instead
            string vfsPath = Path.GetFullPath(CombinePaths(coreDir, "..", "..", "vfs.json"));

            // Install VFS
            init_vfs(vfsPath, $"{gamePath}\\");

            // We're now in simulating BepInEx folder structure!

            //TestVFS(args);

            // Reset current directory as a final measure to fool BepInEx
            Directory.SetCurrentDirectory(gamePath);

            // Load BepInEx into memory and invoke it as if it were through Doorstop
            Assembly ass = Assembly.LoadFile(CombinePaths("BepInEx", "bin", "BepInEx.dll"));
            Type t = ass.GetType("BepInEx.Bootstrap.Preloader");
            t.GetMethod("Main", BindingFlags.Public | BindingFlags.Static).Invoke(null, new object[] {args});
        }

        private static string CombinePaths(params string[] paths)
        {
            return paths.Aggregate(Path.Combine);
        }

        private static void TestVFS(string[] args)
        {
            using (TextWriter tw = File.CreateText("doorstop_is_alive.txt"))
            {
                tw.WriteLine($"Hello! This text file was generated by Doorstop on {DateTime.Now:R}!");
                tw.WriteLine($"I was called with {args.Length} params!");

                for (int i = 0; i < args.Length; i++)
                    tw.WriteLine($"{i} => {args[i]}");

                tw.WriteLine("TESTS:");

                string bepinPath = "BepInEx";

                tw.WriteLine($"BepInEx path exists: {Directory.Exists(bepinPath)}");
                try
                {
                    tw.WriteLine("Trying to get creation time!");
                    tw.WriteLine($"Creation time: {Directory.GetCreationTime(bepinPath):R}");
                }
                catch (Exception e) { }

                try
                {
                    tw.WriteLine("Trying to read all contents of UnityInjector\\Config\\Strings\\Translation");
                    tw.WriteLine(File.ReadAllText("UnityInjector\\Config\\Strings\\Translation\\maidbattle.25.txt"));
                }
                catch (Exception e) { }

                try
                {
                    tw.WriteLine("Files in BepInEx:");

                    foreach (string file in Directory.GetFiles("UnityInjector", "*", SearchOption.AllDirectories))
                        tw.WriteLine($"{file}");
                }
                catch (Exception e) { }

                tw.Flush();
            }
        }

        private delegate void InitVfsDelegate([MarshalAs(UnmanagedType.LPWStr)] string path,
                                              [MarshalAs(UnmanagedType.LPWStr)] string game_path);
    }
}